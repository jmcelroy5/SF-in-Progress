{
  "name": "hoodie",
  "title": "Hoodie.js",
  "description": "Hoodie library for the browser",
  "version": "0.6.5",
  "main": "./src/hoodie.js",
  "homepage": "http://hood.ie",
  "repository": {
    "type": "git",
    "url": "https://github.com/hoodiehq/hoodie.js.git"
  },
  "bugs": {
    "url": "https://github.com/hoodiehq/hoodie.js/issues"
  },
  "licenses": [
    {
      "type": "Apache License 2.0",
      "url": "https://github.com/hoodiehq/hoodie.js/blob/master/LICENSE"
    }
  ],
  "keywords": [
    "nobackend",
    "offline-first",
    "frontend-only"
  ],
  "dependencies": {
    "extend": "~1.2.1"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "jshint": "~2.1.3",
    "grunt-contrib-uglify": "~0.2.2",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-watch": "~0.4.4",
    "grunt-contrib-concat": "~0.3.0",
    "grunt-shell": "~0.3.0",
    "karma": "~0.10.4",
    "karma-script-launcher": "~0.1.0",
    "karma-chrome-launcher": "~0.1.0",
    "karma-firefox-launcher": "~0.1.0",
    "karma-html2js-preprocessor": "~0.1.0",
    "karma-phantomjs-launcher": "~0.1.0",
    "karma-mocha": "~0.1.0",
    "karma-coverage": "~0.1.0",
    "karma-sauce-launcher": "~0.1.1",
    "grunt-karma": "~0.6.2",
    "grunt-browserify": "~1.2.11",
    "grunt-umd": "~1.3.0",
    "browserify": "~2.35.1",
    "karma-browserify": "git://github.com/gr2m/karma-browserify.git",
    "graceful-fs": "~2.0.1",
    "hoodie.js-assets": "git://github.com/gr2m/hoodie.js-assets.git",
    "expect.js": "~0.2.0",
    "sinon": "~1.7.1",
    "load-grunt-tasks": "~0.2.1",
    "grunt-bump": "0.0.13"
  },
  "scripts": {
    "test": "grunt build --verbose",
    "build": "grunt build --verbose"
  },
  "readme": "# Hoodie ✪ power to the frontend! [![Build Status](https://travis-ci.org/hoodiehq/hoodie.js.png?branch=master)](https://travis-ci.org/hoodiehq/hoodie.js)\n\nHoodie is a JavaScript library for the browser.\n\nIt offers you the following pieces of functionality right out of the box:\n\n* user accounts and authentication\n* data storage and sync\n* background tasks\n* sharing\n* emails\n* and so much more\n\nAnd here is what it looks like:\n\n### user accounts & authentication\n\n```javascript\n  // user signup\n  hoodie.account.signUp('joe@example.com', 'secret');\n\n  // user signIn\n  hoodie.account.signIn('joe@example.com', 'secret');\n\n  // user password change\n  hoodie.account.changePassword('secret', 'new_secret');\n\n  // user name change\n  hoodie.account.changeUsername('secret', 'newusername');\n\n  // user signout\n  hoodie.account.signOut();\n\n  // user password reset\n  hoodie.account.resetPassword('joe@example.com');\n```\n\n### store data (it will sync to whereever your users sign in)\n\n```javascript\n\n  // add a new document of type 'task'\n  hoodie.store.add('task', {\n    title: 'build sweetMasterApp tomorrow.'\n  });\n\n  // find all 'task' documents\n  hoodie.store.findAll('task');\n\n  // update a 'task' document\n  hoodie.store.update('task', '123', {\n    done: true\n  });\n\n  // remove a 'task' document\n  hoodie.store.remove('task', '123');\n\n  // listen to and act upon document events\n  hoodie.store.on('add:task', function(object) {\n    alert('new Task added: ' + object.task)\n  });\n```\n\n### Tasks\n\nTasks get picked up by backend workers in the background. You can\nthink of them as special kind of objects that the describe specific\ntasks that you want backend logic for to be accomplished.\n\nIf a task has been completed successfully, it gets removed. If there\nis an error, it stays in the task store to be handled or removed.\n\n\n```js\n  // start a new task. Once it was finished, the succes callback gets\n  // called. If something went wrong, error callback gets called instead\n  hoodie.task.start('message', {to: 'joe', text: 'Party machen?'})\n    .then( showMessageSent, showMessageError )\n\n  // cancel a pending task\n  hoodie.task.cancel('message', '123')\n\n  // restart a pending or canceled task\n  hoodie.task.restart('message', '123', { extraProperty: 'value' })\n\n  // canceled all pending tasks\n  hoodie.task.restartAll()\n\n  // restart all pending or canceled tasks\n  hoodie.task.restartAll()\n```\n\nYou can also subscribe to the following task events\n\n* start\n* cancel\n* error\n* success\n\n```javascript\n  // listen to new tasks\n  hoodie.task.on('start', function (newTask) {});\n\n  // task canceled\n  hoodie.task.on('cancel', function (canceledTask) {});\n\n  // task could not be completed\n  hoodie.task.on('error', function (errorMessage, task) {});\n\n  // task completed successfully\n  hoodie.task.on('success', function (completedTask) {});\n\n  // all listeners can be filtered by type\n  hoodie.task.on('start:message',   function (newMessageTask, options) {});\n  hoodie.task.on('cancel:message',  function (canceledMessageTask, options) {});\n  hoodie.task.on('error:message',   function (errorMessage, messageTask, options) {});\n  hoodie.task.on('success:message', function (completedMessageTask, options) {});\n  hoodie.task.on('change:message',  function (eventName, messageTask, options) {});\n\n  // ... and by type and id\n  hoodie.task.on('start:message:123',   function (newMessageTask, options) {});\n  hoodie.task.on('cancel:message:123',  function (canceledMessageTask, options) {});\n  hoodie.task.on('error:message:123',   function (errorMessage, messageTask, options) {});\n  hoodie.task.on('success:message:123', function (completedMessageTask, options) {});\n  hoodie.task.on('change:message:123',  function (eventName, messageTask, options) {});\n```\n\n**note**: if `change` event is `\"error\"`, the error message gets passed as options.error\n\n\n### publish & share data (work in progress)\n\n```javascript\n\n  // find all 'task' documents and publish them\n  hoodie.store.findAll('task').publish();\n\n  // find all documents that belong to a given user\n  hoodie.user( username ).findAll();\n\n  // find a given task and share it\n  hoodie.store.find('task', '456').share();\n\n  // find a all documents on a given share\n  hoodie.share(shareId).findAll();\n\n  // subscribe to a given share\n  hoodie.share(shareId).subscribe();\n```\n\n### sending emails (work in progress)\n\n```javascript\n\n  // define an email object\n  var magic = hoodie.email.send({\n    to      : ['susan@example.com'],\n    cc      : ['bill@example.com'],\n    subject : 'rule the world',\n    body    : 'we can do it!\\nSigned, Joe'\n  });\n\n  magic.done(function(mail) {\n    alert('Mail has been sent to ' + mail.to);\n  });\n\n  magic.fail(function(eror) {\n    alert('Sorry, but something went wrong: ' + error.reason);\n  });\n\n\n```\n\nBut … how does it work?\n-----------------------\n\nEvery app gets its own hoodie. You need to set one up, because that's `whereTheMagicHappens`:\n\n```html\n  <script src=\"hoodie.js\"></script>\n  <script>\n    whereTheMagicHappens = 'https://yourapp.hood.ie';\n    hoodie = new Hoodie(whereTheMagicHappens);\n  </script>\n```\n\nFor more in-depth documentation, head over to [hood.ie](http://hood.ie).\n\n## Contact\n\nHave a question?\n\n* [\\#hoodie](http://webchat.freenode.net/?channels=hoodie) on Freenode\n* [@hoodiehq](https://twitter.com/hoodiehq) on Twitter\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\nLicense & Copyright\n-------------------\n\nCopyright 2012-2014 https://github.com/hoodiehq/ and other contributors\n\nLicensed under the Apache License 2.0.\n",
  "readmeFilename": "README.md",
  "_id": "hoodie@0.6.5",
  "_from": "hoodie@0.6.5"
}
